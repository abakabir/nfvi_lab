parameter_defaults:
  # List of plugins enabled in Neutron
  NeutronServicePlugins: "router,qos,segments,trunk,port_forwarding"
  NeutronPluginExtensions: "qos,port_security"
  NeutronSriovAgentExtensions: "qos"

  # Metadata through Neutron DHCP
  NeutronEnableIsolatedMetadata: true
  NeutronEnableForceMetadata: true

  # Neutron allowed Network types
  NeutronNetworkType: 'vxlan,vlan,flat'
  NeutronTunnelTypes: 'vxlan,gre'

  # Neutron Logical bridge mapping between a custom name and OVS bridge
  NeutronBridgeMappings: 'external:br-ex,datacentre0:br-link0,datacentre1:br-link1'

  # Neutron VLAN range per bridge
  NeutronNetworkVLANRanges: 'datacentre0,datacentre1,niantic_pool'

  # Neutron Flat Network
  NeutronFlatNetworks: 'external'

  # Default global MTU for the platform
  # In ExtraConfig specific override for overlay
  NeutronGlobalPhysnetMtu: 9000

  # DNS forwarder for the DNSMasq
  NeutronDhcpAgentDnsmasqDnsServers: ['1.1.1.1']

  # Datapath type to be used by OVS-DPDK
  NeutronDatapathType: "netdev"

  # Directory used by Neutron for the VHU ports
  NeutronVhostuserSocketDir: "/var/lib/vhost_sockets"

  # Neutron enabled mechanism drivers
  NeutronMechanismDrivers: ['sriovnicswitch', 'openvswitch']

  # OVS can be used with the Connection tracking system where
  # OpenFlow flow can be used to match on the state of a TCP,
  # UDP, ICMP, etc., connections.
  # Connection tracking in conjunction with Firewall rules 
  # provides a stateful firewall for any VirtIO ports.
  # WARNING: this option has a huge performance degradation (over 80%).
  # When OVS acts also as firewall no SLA can be ensured
  NeutronFirewallDriver: 'openvswitch'
  NeutronOVSFirewallDriver: 'openvswitch'

  # The exact-match cache (EMC) is the first and fastest mechanism
  # OVS uses to determine what to do with an incoming packet
  # Based on field observation as the number of flows increase, the 
  # performance of OvS-DPDK with the EMC seems to diminish below
  # OvS-DPDK performance with no EMC at all.
  # Upstream has proposed alternative caching (SMC in OVS 2.10) and
  # ways to speed up next lookup layer Datapath Classifier (dpcls)
  # The EMC is left enabled here as OVS-DPDK is not supposed to handle 
  # lots of traffic as it's relegated to signaling only traffic
  OvsDisableEMC: false

  ControllerExtraConfig:
    # Array of Physical network and custom MTU size
    # Ensure MTU is 1500 Bytes for external floating IP network
    # Datacentre and Niantic_pool both at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['external:1500','datacentre0:9000','datacentre1:9000','niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeOvsDpdkExtraConfig:
    # Array of Physical network and custom MTU size
    # Datacentre at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeOvsDpdkRTExtraConfig:
    # Array of Physical network and custom MTU size
    # Datacentre at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeDualOvsDpdkExtraConfig:
    # Array of Physical network and custom MTU size
    # Both Datacentre at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000','datacentre1:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeDualOvsDpdkRTExtraConfig:
    # Array of Physical network and custom MTU size
    # Both Datacentre at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000','datacentre1:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeSriovExtraConfig:
    # Array of Physical network and custom MTU size
    # Niantic_pool at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeSriovRTExtraConfig:
    # Array of Physical network and custom MTU size
    # Niantic_pool at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeDualSriovExtraConfig:
    # Array of Physical network and custom MTU size
    # Niantic_pool at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeDualSriovRTExtraConfig:
    # Array of Physical network and custom MTU size
    # Niantic_pool at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeOvsDpdkSriovExtraConfig:
    # Array of Physical network and custom MTU size
    # Datacentre and Niantic_pool both at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000','niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550

  ComputeOvsDpdkSriovRTExtraConfig:
    # Array of Physical network and custom MTU size
    # Datacentre and Niantic_pool both at 9000Byte
    neutron::plugins::ml2::physical_network_mtus: ['datacentre0:9000','niantic_pool:9000']

    # Ensure Overlay VXLAN has 1500 Byte
    neutron::plugins::ml2::path_mtu: 1550
